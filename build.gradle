plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "2.0.8"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id('jacoco')
    id('net.thauvin.erik.gradle.semver') version '1.0.4'
}

shadowJar {
    mergeServiceFiles()
}

group "au.org.biodiversity.nslapi"

ext {
    micronautVersion = "3.1.4"
}

repositories {
    mavenCentral()
}

micronaut {
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("au.org.biodiversity.nslapi.*")
    }
}

dependencies {
    // Micronaut
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor("io.micronaut:micronaut-inject-java")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-management")
    // Groovy
    implementation('org.codehaus.groovy:groovy-all:3.0.9')
    compileOnly("io.micronaut:micronaut-inject-groovy")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    // Data
    compileOnly('org.codehaus.groovy:groovy-sql:3.0.9')
//    implementation("io.micronaut.sql:micronaut-jdbc-tomcat")
    runtimeOnly("org.postgresql:postgresql:42.2.13")
    // http
    implementation("io.micronaut:micronaut-http-client")
    compileOnly("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-server-netty")
    // Logging
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("org.codehaus.janino:janino:3.1.0")
    // testing
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
}

application {
    mainClass.set("au.org.biodiversity.nslapi.Application")
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
    groovyOptions.forkOptions.jvmArgs.add('-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop')
}

// Hot-Reloading
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=au.org.biodiversity.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

//task setupTestDb(type: Exec) {
//    workingDir "$projectDir/src/test/resources"
//    commandLine './setup_test_db.sh'
// }

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

//tasks.withType(Test) {
//    dependsOn(setupTestDb)
//}

test.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote',
        "-Dmicronaut.config.files=./src/test/resources/nsl-api-config.groovy",
        "-Dmicronaut.environments=test")